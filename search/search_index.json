{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spark Book \u26a1","text":"<p>Welcome to Illinois Tech Motorsports' Spark Book! This is a collection of standards, guides, and documentation for designing and manufacturing a Formula SAE (FSAE) Electric racecar. This book is the culmination of 15+ years experience of building electric and hybrid race cars. This book is a living document and is continously updated and edited as needed. </p>"},{"location":"#history","title":"History","text":"<p>IIT Motorsports began building formula-style racecars in 2007 at the Formula Hybrid competition, and converted to full electric cars by 2012. Due to poor document management and failed knowledge-transfer, the team often found themselves having to backtrack and re-learn the basics every year instead of seeing consistent progress. The Spark Book was created in June 2022 by Noah Husby to document standards and guides for creating low voltage schematics quickly. The book has since grown to contain guides and standards for all subsystems on the car as well as hardware manuals, EV concepts, and terminologies. The decision was made to open-source the Spark Book to share the standards and guides with all FSAE teams and to allow for feedback and documentation from contributors outside of the team.</p>"},{"location":"#the-goal","title":"The Goal","text":"<p>The Spark Book was created to achieve two goals:</p> <ol> <li>Increase Knowledge Transfer: This document serves as a public reference for standardizing the team's vehicle designs. The Spark Book is used to understand how previous teams made design decisions which reduces the amount of guessing and uncertainty that comes with designing a Formula SAE car. Since the document is public, alumni of the team and outside contributors can continue to update and improve the document without being a current member.</li> <li>Reduce Design Cycle Time: Designing a Formula SAE car requires many detailed and complex susbsystems to come together to form a final product. The Spark Book contains standards to help keep design across all of the subsystems consistent to allow for easier integration. The book does not replace the need for a dedicated systems engineer, but acts as a supplementary ruleset for how each subsystem should be designed. Adhering to these standards reduce the amount of time and parts necessary for integration.</li> </ol>"},{"location":"#get-started","title":"Get Started","text":"<p>Get started reading one of the following sections:</p> <ul> <li> <p> Structures</p> <p>Standards for the chassis, suspension, and powertrain. Contains guides for Solidworks features and tools</p> <p> Structures</p> </li> <li> <p> Energetics</p> <p>Low and high voltage concepts. Contains standards for schematic design and layout using Altium Designer. </p> <p> Energetics</p> </li> <li> <p> Contribute</p> <p>Request new documentation, open pull-requests, or report errors in the Spark Book</p> <p> Contribute to Spark Book</p> </li> <li> <p> Resources</p> <p>Design reports and open-source code for IIT Motorsports</p> <p> Resources</p> </li> </ul>"},{"location":"energetics/circuits/3.3_5_scale/","title":"0-3.3V to 0-5V OP Amp","text":""},{"location":"energetics/circuits/3.3_5_scale/#description","title":"Description","text":"<p>A circuit which will turn a 0-3.3V analog input into 0-5V analog output. It scales the input voltage by the gain of the circuit which is 1.5 practical. If needed to get the exact theoretical gain needed of 1.5151 then you will need 5150 ohm at R1 and 10000 at R2. </p> <p>Example: The Teensy outputs between 0-3.3V analog however a pump accepts between 0-5V analog.</p> <p>Datasheet</p>"},{"location":"energetics/circuits/3.3_5_scale/#schematic","title":"Schematic","text":""},{"location":"energetics/circuits/3.3_5_scale/#usage","title":"Usage","text":"<p>This circuit is currently not being used in any designs.</p>"},{"location":"energetics/circuits/temp_monitor/","title":"Temperature Monitoring","text":""},{"location":"energetics/circuits/temp_monitor/#description","title":"Description","text":"<p>A circuit which will measure temperature from the air around it. It outputs to SMBus, two-wire, or I2C and takes a recommended supply voltage from 1.4V to 3.6V. It will output a voltage that is proportional to the temperature so as the temperature changes so does the voltage. The TMP112-Q1 device features an address pin to allow up to four devices to be addressed on a single bus.</p> <p>Example: When the temperature in an area is needed to avoid overheating this would be able to tell something that controls the area the temperature and it would then turn it off.</p> <p>Datasheet</p>"},{"location":"energetics/circuits/temp_monitor/#accuracy","title":"Accuracy","text":"Range Accuracy -40F to 257F +/-1.8F 32F to 149F +/-0.9F -40C to 125C +/-1C 0C to 65C +/-0.5C"},{"location":"energetics/circuits/temp_monitor/#pins","title":"Pins","text":"Pin No. Pin Name I/O Description 1 SCL I Serial clock. Open-drain output; requires a pullup resistor. 2 GND -- Ground 3 ALERT O Overtemperature alert. Open-drain output; requires a pullup resistor. 4 ADD0 I Address select. Connect to V+, GND, SDA or SCL 5 V+ I Supply voltage, 1.4V to 3.6V 6 SDA I/O Serial data. open-drain output; requires a pullup resistor."},{"location":"energetics/circuits/temp_monitor/#schematic","title":"Schematic","text":""},{"location":"energetics/circuits/temp_monitor/#usage","title":"Usage","text":"<p>This circuit is currently not being used in any designs.</p>"},{"location":"energetics/concepts/can_bus/","title":"CAN Bus Communications","text":""},{"location":"energetics/concepts/can_bus/#description","title":"Description","text":"<p>CAN(Controller Area Network) is a bus used most commonly in vehicles designed to allow microcontrollers and devices to communicate with each other without a host computer. All microcontrollers and devices all connect to a CAN transceiver then every transceiver is connected to the a twisted pair of wires. All communicaation happens on the two wires and you can have as many devices as you want. CAN allows you to do a form of filtering where every message has a address assigned before sending that only a device or microcontroller that has the same \"mask\" will read it. It is highly recommended that you make it asynchronous/inturupt based to allow faster reaction/transfer of info.</p> <p></p> <p>Example: Communication of logging messages or state data from one microcontroller to another microcontroller.</p>"},{"location":"energetics/concepts/can_bus/#hardware","title":"Hardware","text":"<p>In this example we will be using two Teensy 3.6. These are nice because they have specific pins that are capable of working with the transceiver without the library having to do much. Two CAN transceivers are also needed a good one is SN65HVD230. </p> <p></p> <p></p>"},{"location":"energetics/concepts/can_bus/#library","title":"Library","text":"<p>The library that was and will be used in this example is FlexCan. This one is designed for Teensy 3.1 to 3.6.</p>"},{"location":"energetics/concepts/can_bus/#code","title":"Code","text":"<p>There are two seperate examples here where one will be a sender and the other will be a reciever</p> Sender <pre><code>#include &lt;Arduino.h&gt;\n#include &lt;FlexCAN.h&gt;\n\nbool pin1 = false;\nbool pin2 = false;\nbool pin3 = false;\nbool pin4 = false;\nbool pin5 = false;\n\nFlexCAN CAN0;\nCAN_message_t msg;\n\nvoid oneBytePackage() {\n    msg.len = 1;\n    uint8_t package = 00000000;\n    uint8_t add = 00000001;\n    if(pin1){\n        package = package | add;\n    }\n    package = package &lt;&lt; 1;\n    if(pin2){\n        package = package | add;\n    }\n    package = package &lt;&lt; 1;\n    if(pin3){\n        package = package | add;\n    }\n    package = package &lt;&lt; 1;\n    if(pin4){\n        package = package | add;\n    }\n    package = package &lt;&lt; 1;\n    if(pin5){\n        package = package | add;\n    }\n    msg.buf[0] = package;\n    Serial.println(msg.buf[0]);\n}\n\nvoid setup() {\n// write your initialization code here\n    CAN0 = FlexCAN(125000, 0, 0, 0);\n    pinMode(33, INPUT_PULLDOWN);\n    pinMode(34, INPUT_PULLDOWN);\n    pinMode(35, INPUT_PULLDOWN);\n    pinMode(36, INPUT_PULLDOWN);\n    pinMode(37, INPUT_PULLDOWN);\n\n    CAN0.begin();\n\n    Serial.print(\"hi\");\n}\n\nvoid loop() {\n    pin1 = digitalRead(33);\n    pin2 = digitalRead(34);\n    pin3 = digitalRead(35);\n    pin4 = digitalRead(36);\n    pin5 = digitalRead(37);\n\n    oneBytePackage();\n    CAN0.write(msg);\n}\n</code></pre> <p>The sender in this example is reading a couple switches then oneBytePackage() does bitwise operations to create a 5 bit package then puts it in the allowed 8 bit buffer. Also the msg.len is important to be equal to the amount of buffer you are going to use since the reading side will use it to decide how many buffers it has to read. it is also possible to just throw a number in their however keep in mind that a byte can only hold a number between 0 and 256 unsigned. Lastly also keep in mind that this is not do with any async/inturupt.</p> Reciever <pre><code>#include &lt;Arduino.h&gt;\n#include &lt;FlexCAN.h&gt;\n\nFlexCAN CAN0;\nCAN_message_t msg;\n\nbool pin1 = false;\nbool pin2 = false;\nbool pin3 = false;\nbool pin4 = false;\nbool pin5 = false;\n\nvoid oneByteDecoder(){\n    uint8_t package = msg.buf[0];\n    uint8_t test = 00000001;\n    if ((package &amp; test) == 1){\n        pin5 = true;\n    } else {\n        pin5 = false;\n    }\n    package = package &gt;&gt; 1;\n    if ((package &amp; test) == 1){\n        pin4 = true;\n    } else {\n        pin4 = false;\n    }\n    package = package &gt;&gt; 1;\n    if ((package &amp; test) == 1){\n        pin3 = true;\n    } else {\n        pin3 = false;\n    }\n    package = package &gt;&gt; 1;\n    if ((package &amp; test) == 1){\n        pin2 = true;\n    } else {\n        pin2 = false;\n    }\n    package = package &gt;&gt; 1;\n    if ((package &amp; test) == 1){\n        pin1 = true;\n    } else {\n        pin1 = false;\n    }\n}\n\nvoid pinChange() {\n    digitalWrite(24,pin1);\n    digitalWrite(12,pin2);\n    digitalWrite(10,pin3);\n    digitalWrite(8,pin4);\n    digitalWrite(6,pin5);\n}\n\nvoid setup() {\n    FlexCAN(125000, 0, 0, 0);\n    pinMode(6, OUTPUT);\n    pinMode(8, OUTPUT);\n    pinMode(10, OUTPUT);\n    pinMode(12, OUTPUT);\n    pinMode(24, OUTPUT);\n    digitalWrite(6, LOW);   //bit line position 5\n    digitalWrite(8, LOW);   //bit line position 4\n    digitalWrite(10, LOW);  //bit line position 3\n    digitalWrite(12, LOW);  //bit line position 2\n    digitalWrite(24, LOW);  //bit line position 1\n\n    CAN0.begin();\n}\n\nvoid loop() {\n    CAN0.read(msg);\n    oneByteDecoder();\n    pinChange();\n}\n</code></pre> <p>The reader first tries to read from CAN and if it does then will save it to the msg the decoder uses bitwise operators to convert the byte of data we recieved and then turns it into boolean values that then represent the state of the switches the sender read and sent.</p>"},{"location":"energetics/hardware/charger/elcon-pfc2500/","title":"Elcon PFC-2500","text":"<p>The Elcon PFC-2500 is used to charge the internal battery pack of our electric vehicles. </p> <p></p>"},{"location":"energetics/hardware/charger/elcon-pfc2500/#operation","title":"Operation","text":"<p>Plug the charger into a 120v 20A circuit. Attach the battery connector to the vehicle. Finally, attach the BMS communication cable. The BMS cable should be attached last to ensure that all other connections are solid before sending a charge payload to the charger.</p> <p>Warning</p> <p>The PFC-2500 must be mounted in a valid orientation to ensure proper operation while charging. The best orientation is when the cooling fins are vertical with open space above and below them. Mounting the charger on a metal wall or frame will provide additional conductive cooling and also ground the frame. </p>"},{"location":"energetics/hardware/charger/elcon-pfc2500/#led-charge-state","title":"LED Charge State","text":"<p>The charger state led is located on the longer side of the Elcon PFC-2500 surrounded by a red, yellow, and green label. The state of the led is represented by the following statuses: </p> LED State Description Solid Red Full Power &lt; 85% Flashing Red CV 85% &lt; SOC Solid Yellow Equalize stage CC Solid Green Finished or BMS Enable Circuit Open Alt Green / Red No Battery Connected"},{"location":"energetics/hardware/charger/elcon-pfc2500/#pinouts","title":"Pinouts","text":"<p>The charger can be configured to communicate with the BMS over relay or CAN bus control. Our charger is configured to use relay control which will activate the charger if the trigger circuit is closed. In order to trigger the charger, Pin 1 (Enable) must be connected to Pin 3 (12V). The use of a relay connected to the BMS is advised to ensure proper operation of the charger.</p> <p></p> <p>Warning</p> <p>The charger will not output power (solid green led) unless the BMS circuit is closed.</p>"},{"location":"energetics/hardware/charger/elcon-pfc2500/#supported-batteries","title":"Supported Batteries","text":"<p>The Elcon PFC-2500 supports Flooded, Gel and Advanced Glass Mat (AGM) lead acid, and Lithium Iron Phosphate (LiFePO4). The charger is programmed at configuration time, so the desired configuration will vary from customer to customer.</p>"},{"location":"energetics/onboarding/","title":"Electrical Team Onboarding","text":"<p>Welcome to the electrical team @ IIT Motorsports! The following guide will outline everything necessary to get onboarded with our policies, software, and expectations. </p> <p>The electrical team is split into three seperate sub-teams:</p> Sub Team Description <code>Low Voltage (LV)</code> Designs vehicle PCBs, creates GLV system, and work with microcontroller hardware. <code>High Voltage (HV)</code> Chooses battery configuration and designs accumualtor. <code>Software</code> Develops embedded software for vehicle and designs dashboard software."},{"location":"energetics/onboarding/git/","title":"Git Onboarding","text":"<p>Git is a free and open source software tool used for version control. </p>"},{"location":"energetics/onboarding/git/#create-a-github-account","title":"Create a GitHub Account","text":"<p>If you already have a GitHub account, please skip to Apply for a Student Developer Pack.</p> <p>Create a GitHub Account</p> <p>Tip</p> <p>You will likely continue to use a GitHub account after graduation as a portfolio or in the industry. We recommend the use of a personal email and an appropriate username as this account will be public.</p>"},{"location":"energetics/onboarding/git/#apply-for-a-github-student-license","title":"Apply for a GitHub student license","text":"<p>As a university student, you get access to a ton of solid software resources. The GitHub Student Developer pack includes industry-standard tools for free. We use many of these tools in development for IIT Motorsports.</p> <p>Apply for a Student Developer Pack</p>"},{"location":"energetics/onboarding/git/#join-the-iit-motorsports-organization","title":"Join the IIT Motorsports Organization","text":"<p>We work out of the IIT Motorsports Organization to keep our repositories organized. It's crucial that you have access to this organization in order to utilize elctrical and software resources.</p> <p>Ping the electrical team lead with your github username to get access to the organization.</p>"},{"location":"energetics/onboarding/git/#install-git","title":"Install Git","text":"<p>The Git software is used to interact with git repositories, such as those stored on GitHub.</p>"},{"location":"energetics/onboarding/git/#installation","title":"Installation","text":"**Recommended: ** Install Git using a package manager <p>A package manager makes it easy to install and update software packages with a single command. We recommend the use of the following package managers to install git:</p> Chocolatey (Windows)Scoop (Windows)Winget (Windows)Brew (MacOS)APT (Debian / Ubuntu)DNF (RHEL / CentOS) <pre><code>choco install git\n</code></pre> <pre><code>scoop install git\n</code></pre> <pre><code>winget install -e --id Git.Git\n</code></pre> <pre><code>brew install git\n</code></pre> <pre><code>sudo apt install git-all\n</code></pre> <pre><code>sudo dnf install git-all\n</code></pre> Install Git manually <p>Navigate to https://git-scm.com/downloads and follow the guide for your operating system.</p>"},{"location":"energetics/onboarding/git/#configuration","title":"Configuration","text":"<p>Git needs to be configured to use your new GitHub account. Use the following steps to set your account username and email:</p> <ol> <li>Open Git Bash (or equivelent terminal)</li> <li>Set a git username: <pre><code>git config --global user.name \"Insert Name here\"\n</code></pre></li> <li>Set a git email: <pre><code>git config --global user.email \"insert.email@here.com\"\n</code></pre></li> </ol>"},{"location":"energetics/onboarding/tasks/","title":"Tasks \ud83d\udcc3","text":"<p>Here is some information about tasks that members can work on.</p> <p>Currently, tasks are being set on our Jira. You can view and assign yourself tasks there.</p> <p>If you are unfamiliar with any of the terminology or concepts described in any task but are interested, first attempt to look up what they mean or how they work yourself. If that does not work, feel free to ask anyone in the club that should know, we are all open to helping.</p> <p>If your task involves finding/buying parts to use, that is intentional, you must find the parts that you need. Ask us for things to buy or things that we might have for you to use, however, you must give us the intention for the parts/materials and how exactly you plan to use them. This is not to prevent you from experimenting but to ensure our limited budget is used effectively.</p> <p>You are expected to go beyond what the task goals state, meaning, things like prototyping on a breadboard and, for some of these tasks, even designing a PCB are implied. Again, feel free to ask members for help or for parts that you need.</p> <p>When working on electrical tasks, always keep the rules in mind. If you are uncertain about which set of rules to reference, please ask someone who should know. Additionally, keep voltage and current in mind when working with physical parts, not everything you will work with is directly tolerant with each other, i.e. 3.3v vs 5v ICs.</p> <p>Note: All the \"Goals\" sections in Jira are listed in order of importance</p>"},{"location":"energetics/onboarding/terminology/","title":"Terminology \ud83d\udcac","text":"<p>Electrical sub-team acronyms and terminology</p>"},{"location":"energetics/onboarding/terminology/#ts-tractive-system","title":"TS - Tractive System","text":""},{"location":"energetics/onboarding/terminology/#tsmp-tractive-system-measuring-point","title":"TSMP - Tractive System Measuring Point","text":""},{"location":"energetics/onboarding/terminology/#tsms-tractive-system-master-switch","title":"TSMS - Tractive System Master Switch","text":""},{"location":"energetics/onboarding/terminology/#tsv-tractive-system-voltage","title":"TSV - Tractive System Voltage","text":""},{"location":"energetics/onboarding/terminology/#tsal-tractive-system-active-lamp","title":"TSAL - Tractive System Active Lamp","text":""},{"location":"energetics/onboarding/terminology/#glv-ground-low-voltage","title":"GLV - Ground Low Voltage","text":""},{"location":"energetics/onboarding/terminology/#glvms-grounded-low-voltage-master-switch","title":"GLVMS - Grounded Low Voltage Master Switch","text":""},{"location":"energetics/onboarding/terminology/#pcb-printed-circuit-board","title":"PCB - Printed Circuit Board","text":"<p>A thin board typically made of an epoxy fiberglass composite. Conductive pathways are etched or \"printed\" onto it, connecting different components that reside on the PCB.</p>"},{"location":"energetics/onboarding/terminology/#ic-integrated-circuit","title":"IC - Integrated Circuit","text":"<p>Sometimes called a chip or microchip, an IC is a semiconductor wafer on which thousands or millions of tiny resistors, capacitors, diodes and transistors are fabricated. IC is often used as a general term for any type of amplifier, oscillator, timer, counter, logic gate, computer memory, microcontroller or microprocessor.</p>"},{"location":"energetics/onboarding/terminology/#can-bus-controller-area-network","title":"CAN Bus - Controller Area Network","text":"<p>This is a robust vehicle bus standard designed to allow microcontrollers and devices, or nodes in a network, to communicate without a host computer. CAN Bus is a message-based protocol which we often implement with a specific IC or \"shield\". Certain modules come with a CAN node built in.</p>"},{"location":"energetics/onboarding/terminology/#ecu-electronic-controller-unit","title":"ECU - Electronic Controller Unit","text":"<p>Typically refers to a microcontroller board such as the Teensy development board.</p>"},{"location":"energetics/onboarding/terminology/#accumulator","title":"Accumulator","text":"<p>The accumulator is a general term that refers to the batteries of the car, as batteries are used to accumulate power. However, when we are talking about the \"accumulator\" we are often referring to the batteries and the housing it is in, along with everything else that is in the housing. Certain members also tend to pronounce this as the 'Acoumulaytor', please be respectful to these people.</p>"},{"location":"energetics/onboarding/terminology/#air-accumulator-isolation-relay","title":"AIR - Accumulator Isolation Relay","text":""},{"location":"energetics/onboarding/terminology/#ams-accumulator-management-system","title":"AMS - Accumulator Management System","text":"<p>The Module that monitors and interacts directly with the battery down to each cell. This includes things such as thermistors for temperature monitoring and the charging and balancing of cells.</p>"},{"location":"energetics/onboarding/terminology/#mc-motor-controller","title":"MC - Motor Controller","text":"<p>Motor controllers are the 3 phase inverters that stand between the High voltage system and the motors. They are what mediate the power being sent. We often are referring to the PM100s when talking about motor controllers.</p>"},{"location":"energetics/onboarding/terminology/#imd-insulation-monitoring-device","title":"IMD - Insulation monitoring device","text":"<p>This device resides on the High voltage PCB board and it monitors the voltage between our High voltage system and the vehicle's ground. It ensures that the chassis is not energized with high voltage.</p>"},{"location":"energetics/onboarding/terminology/#brb-big-red-buttons-emergency-shutdown-switches","title":"BRB - Big Red Buttons (Emergency shutdown switches)","text":"<p>They are as they say, Big Red and Buttony. With current rules, there are three BRBs. One on each side of the car and one in the cockpit. These are part of the shutdown circuit, meaning you can press them to turn off the car (the cockpit BRB only turns off TS), and pull them up to do the opposite.</p>"},{"location":"energetics/onboarding/terminology/#hvd-high-voltage-disconnect","title":"HVD - High Voltage Disconnect","text":"<p>As long as it is safe to do so, this is what you should disconnect if the car is going haywire. It will disconnect the batteries and help prevent anything fun from happening with the batteries.</p>"},{"location":"energetics/onboarding/terminology/#smd-segment-maintenance-disconnect","title":"SMD - Segment Maintenance Disconnect","text":""},{"location":"energetics/onboarding/terminology/#esok-safety-systems-ok-lamp","title":"ESOK - Safety Systems OK Lamp","text":""},{"location":"energetics/onboarding/terminology/#esf-electrical-system-form","title":"ESF - Electrical System Form","text":""},{"location":"energetics/onboarding/terminology/#ac-alternating-current","title":"AC - Alternating Current","text":"<p>When the pixes do the Jiggy</p>"},{"location":"energetics/onboarding/altium/","title":"Altium Onboarding","text":"<p>Altium Designer is an Electronic Design Automation (EDA) tool used to create electrical schematics and printed circuit boards (PCBs).</p>"},{"location":"energetics/onboarding/altium/#create-an-altiumlive-student-account","title":"Create an AltiumLive student account","text":"<p>If you already have an Altium account, please skip to Installing Altium Designer.</p> <p>Create an AltiumLive Student Account</p> <p>Note</p> <p>Unless you are provided with a license from IIT Motorsports, you will have to renew your student license every six months to maintain access to Altium Designer.</p>"},{"location":"energetics/onboarding/altium/#installing-altium-designer","title":"Installing Altium Designer","text":"<p>Altium Designer is only available on Windows x86 systems. PCBs can be viewed from other operating systems through Altium 365.</p> <p>Download the <code>.exe</code> file for Altium Designer from their download page.</p> <p>Download Altium Designer</p>"},{"location":"energetics/onboarding/altium/#activate-altium-designer","title":"Activate Altium Designer","text":"<p>After installing Altium Designer, open the program and navigate to the upper-right hand user menu and select <code>Licenses</code>. If you aren't already signed in, click <code>Sign In</code>.</p> <p></p> <p>Once logged in, Altium Designer will display all licenses associated with the AltiumLive account. Select the active license and click use. </p> <p></p>"},{"location":"energetics/onboarding/altium/library_management/","title":"Altium Library Management","text":"<p>IIT Motorsports keeps an extensive catalog of parts for our schematics and PCBs. To ensure accurate circuit design and board production, it is imperitive that the data for these parts is entered correctly. We use the standardizations and instructions as listed below in order to maintain our parts library.</p> <p>We store all of our parts in our Altium 365 cloud instance. This reduces the dependency on manually shared libraries for our contributors. All libraries are automatically synchronized between Altium instances.</p> <p>Our components are split up into the following categories:</p> Component Categories <ul> <li>Audio</li> <li>Batteries</li> <li>Capacitors</li> <li>Connectors</li> <li>Crystals &amp; Oscillators</li> <li>Data Converters</li> <li>Diodes</li> <li>Fuses</li> <li>Inductors</li> <li>Integrated Circuits<ul> <li>Amplifiers</li> <li>Clock &amp; Timing</li> <li>Drivers</li> <li>Interface</li> <li>Logic</li> <li>Memory</li> <li>Power Supply</li> <li>Processors</li> <li>Wireless</li> </ul> </li> <li>LED</li> <li>Logics</li> <li>Mechanical</li> <li>Microcontrollers</li> <li>Miscellaneous</li> <li>Optoelectronics</li> <li>Radio &amp; RF</li> <li>Relays</li> <li>Resistors</li> <li>Switches</li> <li>Test Points</li> <li>Transformers</li> <li>Transistors</li> </ul>"},{"location":"energetics/onboarding/altium/library_management/#install-component-helpers","title":"Install Component Helpers","text":"<p>We get the majority of our components from the Manufacturer Part Search (formerly Altium Content Vault). We use alternate component libraries when the part is not in the altium vault.</p> <p>We use the following methods to retrieve components for Altium:</p> <ul> <li>Manufacturer Part Search (Recommended)</li> <li>SnapEDA</li> <li>Ultra Librarian</li> </ul> <p>In order to make downloading components from SnapEDA and Ultra Librarian easy, we recommend installing the import tool for these libraries.</p>"},{"location":"energetics/onboarding/altium/library_management/#install-snapeda","title":"Install SnapEDA","text":"<ol> <li>Exit Altium Designer.</li> <li>Grab SnapEDA Altium Plugin from https://www.snapeda.com/plugins/.</li> <li>Unzip the file.</li> <li>Run the <code>.exe</code> installer.</li> <li>Once installed, run Altium Designer and open SnapEDA using the button at the top. </li> <li>Sign in to SnapEDA.</li> <li>Open settings and change the library path to a known folder. You'll need to navigate to this folder each time you import a part from SnapEDA. We recommend: <code>{your_user}/Documents/SnapEDAImport</code>. </li> </ol>"},{"location":"energetics/onboarding/altium/library_management/#how-to-find-upload-and-use-components","title":"How to Find, Upload, and Use components","text":"<p>In order to find components, we use the following method:</p> <p></p>"},{"location":"energetics/onboarding/altium/library_management/#step-1-check-components-panel","title":"Step 1 - Check Components Panel","text":"<p>The components panel represents all components that we've used and uploaded to our Altium 365 instance. This should be the first place you check for components. Any component that is created must be added to the components bin in order to be properly synced and used for all projects.</p> <ul> <li>Make sure that the IIT Motorsports Altium 365 instance is active by clicking the cloud icon in the upper-right hand corner.</li> <li>Ensure that the box above the search bar is set to <code>All</code> which will automatically pull components from the Altium 365 instance.</li> </ul> <p></p> <p>\u2705 If the part is found, then it can be dragged into the active project and you're done.</p> <p>\u274c If the part is not found, then move onto Step 2 - Check Manufacturer Part Search</p>"},{"location":"energetics/onboarding/altium/library_management/#step-2-check-manufacturer-part-search","title":"Step 2 - Check Manufacturer Part Search","text":"<p>The manufacturer part search is an integrated component library solution that allows you to easily import popular components into Altium. </p> <p>Here's the following steps to import a component. We will be using a Rohm Semiconductor RED SMD LED for this example.</p> <ol> <li>Open the <code>Manufacturer Part Search</code> panel and search for the desired component. The green semiconductor symbol next to the component indicates whether it has a symbol and footprint available which is required to make the component.</li> </ol> <p>Warning</p> <p>If the component does not have the green semiconductor symbol, then the part does not have the data necessary to make the component. Move onto Step 3 - Check SnapEDA.</p> <p></p> <ol> <li> <p>Click the arrow next to download, then select <code>Acquire...</code>. </p> </li> <li> <p>Select the type of the component. For this example, we'll be adding the component to the LED category. </p> </li> <li> <p>The menu will prompt you to accept the component data. We recommend that you only select one datasheet from the list to avoid uploading more data than necessary. Click Okay. </p> </li> <li> <p>The Manufacturer Part Search will automatically fill out all of the necessary information. Unless any further changes are necessary, the component is ready to be uploaded. Right-Click the upper tab and click save, or use Ctrl+S. This will only save the component locally, and not to the cloud. </p> </li> <li> <p>The component is ready to be uploaded to the cloud. Right-click the component tab and click <code>Close</code>. When prompted, save the component to the server. When asked for release notes, click Okay.   </p> </li> </ol> <p>\u2705 The part has been successfully added and saved to the cloud. The component can be added from the components bin into the active project and you're done!</p>"},{"location":"energetics/onboarding/altium/library_management/#step-3-check-snapeda","title":"Step 3 - Check SnapEDA","text":"<p>SnapEDA is a popular third-party component library. SnapEDA has an extensive catalog of parts for companies like TE Connectivity and Amphenol. If the Check Manufacturer Part Search doesn't have the component, we check SnapEDA for the part next.</p> <p>Note</p> <p>Make sure you have the directory you set for SnapEDA in the Install Component Helpers step ready as it'll be necessary here.</p> <p>Here's the following steps to import a component using SnapEDA. We will be using a TE Connectivity 2 Position Header (5-103635-1) for this example.</p> <p>Warning</p> <p>If the component does not have the semiconductor and footprint symbol both illuminated, then the part does not have the data necessary to make the component. Move onto Step 4 - Check Ultra Librarian.</p> <ol> <li> <p>Open the <code>SnapEDA</code> panel and search for the desired component.       </p> </li> <li> <p>Download the component to your local computer. It is imperitive that you download the part instead of placing it. If the part is placed directly, then it won't be uploaded to the Altium 365 cloud.   </p> </li> <li> <p>Navigate to the folder that you set for SnapEDA. There should be two files there with the same part number as the component.     </p> </li> <li> <p>Remember where these files are stored, and move on to Step 5 - Upload Component to Altium 365.</p> </li> </ol>"},{"location":"energetics/onboarding/altium/library_management/#step-4-check-ultra-librarian","title":"Step 4 - Check Ultra Librarian","text":"<p>Ultra Librarian is another online component library that can export files for Altium. We often find quality issues with the files provided by Ultra Librarian. At this stage, we recommend considering making the component from scratch.  </p> <p>Here's the following steps to import a component using Ultra Librarian. We will be using an Analog Devices Flyback Regulator (MAX17690ATE+T) for this example.</p> <ol> <li>Go to app.ultralibrarian.com and search for your component. Once at the component page, click the <code>Download Now</code> button. Select the 3D step and Altium Designer files.      </li> <li>Once downloaded, extract the files to a temporary folder.     </li> <li>Open Altium Designer, and click <code>Edit -&gt; Run Script</code>. Once open, click browse, select file and navigate to <code>[Temp folder]/Altium Designer/[date]/*.PrjScr</code>. Open it and then click run.      </li> <li> <p>At the window, select the <code>File...</code> button, and navigate to <code>[Temp folder]/Altium Designer/[date]/*.txt</code>. Click okay, then click <code>Start Import</code>. At the prompt, click Okay to silence the warning.      </p> <p></p> </li> <li> <p>Navigate to <code>[Temp folder]/Altium Designer/[date]</code>. The <code>*.PcbLib</code> and <code>*.SchLib</code> files should be visible. These will be necessary for the next step.</p> <p></p> </li> <li> <p>Remember where these files are stored, and move on to Step 5 - Upload Component to Altium 365.</p> </li> </ol>"},{"location":"energetics/onboarding/altium/library_management/#step-5-upload-component-to-altium-365","title":"Step 5 - Upload Component to Altium 365","text":"<ol> <li> <p>Open Library Importer, navigate to the folder with the component files, and select the two files with the corresponding part name.</p> <p> </p> </li> <li> <p>Set the type of the component, then click <code>Import</code>.      </p> </li> </ol> <p>Abstract</p> <p>Imported files are often missing necessary data and models. The component imported using the method above must be re-edited in order to add the missing data.</p> <p>Follow these steps to add conclusive component data:</p> <ol> <li>Go to the <code>Components</code> panel and search for the component you just uploaded. Right click on the component and click Edit.     </li> <li> <p>Check the Part Choices box. If this is empty:</p> <ul> <li> <p>Click the add button.</p> <p></p> </li> <li> <p>Find the correct part data from the list. Altium should automatically search for the part number, but manual searching may be necessary in certain cases.</p> <p></p> </li> <li> <p>Select all checkboxes under parameters. We recommend you only select one datasheet since they are most likely duplicates of each other. Then click Okay.</p> <p></p> </li> </ul> </li> <li> <p>It is crucial that the part has a 3D model if possible. This is necessary for determing clearence with circuit boards as well as accurate renders. Altium can accept .stp, .step files as 3D models for components. If there is no 3D model and you don't have a 3D model website, try to find the model file from the component manufacturer's website. Follow this guide on placing a 3D model on an altium footprint for reference.</p> </li> <li>The component is ready to be uploaded to the cloud. Right-click the component tab and click <code>Close.</code> When prompted, save the component to the server. When asked for release notes, click Okay.       </li> </ol>"},{"location":"resources/standardization/","title":"Standardization","text":""},{"location":"resources/standardization/#heatshrink","title":"Heatshrink","text":"<p>We have selected Raychem as our manufacturer of choice in order to stay consistent with our wire harness choice. We are only using black heatshrink to simplify inventory and make use of separate indicators and labels.</p> Manufacturer Model Color Inner Diameter - Supplied Inner Diameter - Recovered Compatible AWG TE Connectivity Raychem Cable Protection SCL-1/8-0-STK Black 0.125\" (3.18mm) 0.023\" (0.58mm) 22-18"},{"location":"resources/standardization/#solder","title":"Solder","text":"<p>TBD</p>"},{"location":"structures/fasteners/","title":"Fastener Standardization","text":"<p>In an effort to reduce and simplify the hardware used on the vehicle, the team has created a set of standard fasteners used across all designs. The fasteners listed below and mating nuts, washers, and tabs are regularly stocked and must be should be used unless a design requires specialized hardware.</p> <p>Note</p> <p>Fastenal is the vendor of choice for IIT Motorsports. To simplify procurement, any additional fasteners to the list below should be available and reguarly stocked by Fastenal.</p>"},{"location":"structures/fasteners/#hex-cap-screw","title":"Hex Cap Screw","text":"Type Size Wrench Size Thread Thread Type Grade Standard Material Fastenal # M4-0.7 x 10mm 7mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138522 M4-0.7 x 16mm 7mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138524 M4-0.7 x 20mm 7mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138525 M4-0.7 x 25mm 7mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138526 M4-0.7 x 30mm 7mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138527 M6-1.0 x 16mm 10mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138564 M6-1.0 x 20mm 10mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138565 M6-1.0 x 30mm 10mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138567 M6-1.0 x 40mm 10mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138569 M6-1.0 x 50mm 10mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138571 M8-1.25 x 25mm 13mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138616 M8-1.25 x 30mm 13mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138617 M8-1.25 x 40mm 13mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138619 M8-1.25 x 50mm 13mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138621 M8-1.25 x 60mm 13mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138623 M10-1.5 x 30mm 17mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138656 M10-1.5 x 40mm 17mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138658 M10-1.5 x 50mm 17mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138660 M10-1.5 x 60mm 17mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138662 M10-1.5 x 70mm 17mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138664 M12-1.75 x 30mm 19mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138706 M12-1.75 x 40mm 19mm Coarse Full Thread Class 8.8 DIN 933 Steel, Zinc Finish 1138708 M12-1.75 x 50mm 19mm Coarse Partial Thread Class 8.8 DIN 931 Steel, Zinc Finish 1138710 M12-1.75 x 60mm 19mm Coarse Partial Thread Class 8.9 DIN 932 Steel, Zinc Finish 1138712 M12-1.75 x 70mm 19mm Coarse Partial Thread Class 8.10 DIN 933 Steel, Zinc Finish 1138714"},{"location":"structures/fasteners/#socket-head-cap","title":"Socket Head Cap","text":"Type Size Drive Size Thread Thread Type Grade Standard Material Fastenal # M4-0.7 x 10mm 3mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139524 M4-0.7 x 16mm 3mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139526 M4-0.7 x 20mm 3mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139527 M4-0.7 x 25mm 3mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139528 M4-0.7 x 30mm 3mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139529 M6-1.0 x 16mm 5mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139566 M6-1.0 x 20mm 5mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139567 M6-1.0 x 30mm 5mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139569 M6-1.0 x 40mm 5mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139571 M6-1.0 x 50mm 5mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139573 M8-1.25 x 25mm 6mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139588 M8-1.25 x 30mm 6mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139589 M8-1.25 x 40mm 6mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139591 M8-1.25 x 50mm 6mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139593 M8-1.25 x 60mm 6mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139595 M10-1.5 x 30mm 8mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139619 M10-1.5 x 40mm 8mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139621 M10-1.5 x 50mm 8mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139623 M10-1.5 x 60mm 8mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139625 M10-1.5 x 70mm 8mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139626 M12-1.75 x 30mm 10mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139654 M12-1.75 x 40mm 10mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139656 M12-1.75 x 50mm 10mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139658 M12-1.75 x 60mm 10mm Coarse Full Thread Class 12.9 DIN 912 Alloy Steel, Black Oxide 1139660"},{"location":"structures/fasteners/#solidworks-toolbox-mapping","title":"Solidworks Toolbox - Mapping","text":"<p>The team maintains it's own fastener library using Solidworks Toolbox &amp; PDM. Solidworks uses different names and standards to identify hardware. A non-exhaustive mapping of Solidworks Toolbox parts to hardware can be found below.</p> Toolbox Path Type System Grade Standard DIN/Bolts and Screws/Hex Bolt and Screws/Hex Screw Grade B - DIN EN 24015 Hex Cap Screw Metric Class 8.8 DIN 933 DIN/Bolts and Screws/Hex Bolt and Screws/Hex Screw Grade B - DIN 931-2 Hex Cap Screw Metric Class 8.8 DIN 931"}]}